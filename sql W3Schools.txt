SQL - structured query language

	SQL keywords are NOT case sensitive
	Some database systems require a semicolon at the end of each SQL statement.
	Semicolon is the standard way to separate each SQL statement

What can SQL do?
 01. SQL can create new databases
 02. SQL can create new tables in a database
 03. SQL can insert records in a database
 04. SQL can update records in a database
 05. SQL can delete records from a database
 06. SQL can create stored procedures in a database
 07. SQL can create views in a database

Some of The Most Important SQL Commands
 	SELECT - extracts data from a database
	UPDATE - updates data in a database
	DELETE - deletes data from a database
	INSERT INTO - inserts new data into a database
	CREATE DATABASE - creates a new database
	ALTER DATABASE - modifies a database
	CREATE TABLE - creates a new table
	ALTER TABLE - modifies a table
	DROP TABLE - deletes a table
	CREATE INDEX - creates an index (search key)
	DROP INDEX - deletes an index


Examples to RDBMS databases,
	SQL, MS SQL Server, IBM DB2, Oracle, MySql, Microsoft Access

SELECT   - SELECT statement is used to select data(mention column names) from a database.
FROM     - 
WHERE    - WHERE clause is used to filter records. It is used to extract only those records that fulfill a specified condition.
	     WHERE clause ekata text values use karaddi single quotes or double quotes. it is not a problem. (SELECT * FROM Customers WHERE Country='Mexico';)

		Operators in the WHERE clause
		<>		Not equal. Note: In some versions of SQL this operator may be written as !=	
		BETWEEN	Between a certain range	
		LIKE		Search for a pattern	
		IN		To specify multiple possible values for a column
		IS NULL     look for NULL values.


GROUP BY -
HAVING   -
ORDER BY - ORDER BY keyword is used to sort the result-set in ascending or descending order.



DISTINCT                    *********************************************************

SELECT DISTINCT Country 
FROM Customers;



SQL UPDATE Statement       **********************************************************
UPDATE statement is used to modify the existing records in a table.

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

Note: Be careful when updating records in a table! 
Notice the WHERE clause in the UPDATE statement. 
The WHERE clause specifies which record(s) that should be updated. 
If you omit the WHERE clause, all records in the table will be updated!



SQL DELETE Statement      ***********************************************************-------------------------------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

DELETE FROM table_name WHERE condition;
The DELETE statement is used to delete existing records in a table. 
this deletes one or two or three records which matches with WHERE condition.


DELETE FROM Customers;
This deletes all rows in the "Customers" table, without deleting the table.
That's mean this does not delete table structure.



SQL DROP Statement        **********************************************************-------------------------------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
DROP TABLE table_name;

SQL DROP Table command to drop a table from the database. 
It completely removes the table structure and associated indexes, statistics, permissions, triggers and constraints.



SQL TRUNCATE Statement    **********************************************************-------------------------------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
TRUNCATE TABLE table_name;

TRUNCATE Command deletes all the rows from the existing table, 
leaving the row with the column names


VIEWS                     **********************************************************-------------------------------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
This is a virtul table created by us. 

01. CREATE VIEW

CREATE VIEW [virtual_table_name] AS
SELECT column(s)
FROM table_name
WHERE condition;

Way to retrieve all the data from created view
SELECT * FROM [virtual_table_name];


02. Updating a View

CREATE OR REPLACE VIEW [virtual_table_name] AS 
SELECT column(s)
FROM table_name
WHERE condition;
	


03. Dropping a View

DROP VIEW [virtual_table_name];



LIMIT clause              *********************************************************

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;



SQL MIN() and MAX() Functions ****************************************************

SELECT MIN(column_name)
FROM table_name
WHERE condition;


COUNT() Function         **********************************************************
Returns the number of columns that matches with condition

SELECT COUNT(column_name)
FROM table_name
WHERE condition


AVG() Function           *********************************************************
Returns the average value of a numeric column.

SELECT AVG(column_name)
FROM table_name
WHERE condition


SUM() Function           *********************************************************
Returns the total sum value of that column

SELECT SUM(column_name)
FROM table_name
WHERE condition



LIKE Operator           *********************************************************
this is used with WHERE clause to search specific pattern in a column

SELECT column1, column2, ...
FROM table_name
WHERE column_name LIKE ' pattern '



Wildcard characters     *********************************************************-----------------------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
selects all customers with a City starting with "b", "s", or "p"

SELECT *
FROM Customers
WHERE City LIKE '[bsp]%'



select all customers with a City NOT starting with "b", "s", or "p"

SELECT *                                            SELECT * 
FROM Customers                      or              FROM Customers
WHERE City LIKE '[!bsp]%'                           WHERE City NOT LIKE '[bsp]%';







IN Operator            *********************************************************--------------------------------------------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Two ways we can use this operator.

SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, value3, ...)


	ex: selects all customers that are located in "Germany", "France" or "UK"
		SELECT *
		FROM Customers
		WHERE Country IN ("Germany", "France", "UK")

		This can be done as this,

		WHERE Country = "Germany" OR Country = "France" OR Country = "UK"
		but 


SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT)


	ex: selects all customers that are from the same countries as the suppliers
		SELECT *
		FROM Customers
		WHERE Country IN (SELECT Country FROM Suppliers)




BETWEEN Operator       *********************************************************
selects values within a given range. The values can be numbers, text, or dates.

SELECT column_name(s)
FROM table_name
WHERE column BETWEEN value1 AND value2


BETWEEN with IN        *********************************************************-------------------------------------------------------------<<<<<<<<<<<<<<<<<<
selects all products with a price between 10 and 20. In addition; do not show products with a CategoryID of 1,2, or 3

SELECT *
FROM Products
WHERE Price BETWEEN 10 AND 20 
AND CategoryID NOT IN (1,2,3)


BETWEEN Text Values    *********************************************************
selects all products with a ProductName between Carnarvon Tigers and Mozzarella di Giovanni:
SELECT * 
FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;


BETWEEN Dates         *********************************************************
selects all orders with an OrderDate between '01-July-1996' and '31-July-1996'
SELECT * 
FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;



INNER JOIN            *********************************************************

SELECT column_names
FROM table1 INNER JOIN table2 ON table1.common_column = table2.common_column


LEFT JOIN or LEFT OUTER JOIN***************************************************
returns all records from the left table (table1), 
and the matching records from the right table (table2).

SELECT column_names
FROM table1 LEFT JOIN table2 ON table1.common_column = table2.common_column


	ex: select all customers, and any orders they might have
		SELECT customers.customerName, orders.orderID
		FROM customers LEFT JOIN orders ON customers.customerID = orders.customerID



RIGHT JOIN or RIGHT OUTER JOIN*************************************************
returns all records from the right table (table1), 
and the matching records from the left table (table2).

SELECT column_names
FROM table1 RIGHT JOIN table2 ON table1.common_column = table2.common_column




FULL OUTER JOIN and FULL JOIN**************************************************
returns all records when there is a match in left (table1) or right (table2) table records.
returns all matching records from both tables whether the other table matches or not

SELECT column_names
FROM table1 FULL OUTER JOIN table2 ON table1.common_column = table2.commom_column

Self JOIN                    **************************************************
A self join is a join in which a table is joined with itself
However, referencing the same table more than once within a single query will result in an error. 
To avoid this, SQL SELF JOIN aliases are used.

SELECT column_name(d)
FROM table1 T1, table1 T2
WHERE condition

		ex: if we want to find out customers who are in same city and if we want to get
		    customers details and city into one record.
			then it is better to use Self JOIN.



UNION Operator              **************************************************
This is used to combine multiple SELECT STATEMENTS 
but there are some rules.
	01. all the select statements should have same number of columns       ->   same number of columns
	02. all the columns should have similar data types                     ->   similar data types
	03. all the columns in every SELECT STATEMENT should be in same order. ->   same order
 

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2


UNION selects only distinct values.  
UNION ALL select all values if there are duplicate values



GROUP BY Statement         **************************************************
GROUP BY STATEMENT group rows that have similar values into summary rows.

Aggregate functions 
	COUNT() 
	MAX() 
	MIN() 
	SUM() 
	AVG()
GROUP BY STATEMENT is usually used with Aggregate functions.

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s)

		ex: lists the number of customers in each country

		lists the number of customers -> that's mean total customers 
		in each country               -> in each country

		full meaning,                 -> total customers in each country


		SELECT COUNT(customerID), country
		FROM customers
		GROUP BY country


		ex: lists the number of customers in each country, sorted high to low

		SELECT COUNT(customerID), , country
		FROM customers
		GROUP BY country
		ORDER BY COUNT(customerID) DESC





Orders table
Shippers table

list the number of orders -> total orders
sent by each shipoer      -> group by shipper

select COUNT(OrderID), ShipperName
from Shippers
where Shippers s, Orders o AND s.ShipperID = o.ShipperID
group by ShipperName


HAVING Clause              **************************************************

HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition for aggregate functions
ORDER BY column_name(s)


		ex: lists the number of customers in each country. 
		    Only include countries with more than 5 customers

		    lists the number of customers in each country -> total customers in each country
		    display Count(customers) > 5	

SELECT Country, CustomerName, COUNT(CustomerID) AS 'Total Customers'
FROM Customers
GROUP BY Country
HAVING COUNT(CustomerID) > 5



		ex: lists the employees that have registered more than 10 orders.

		Orders table 
		OrderID	CustomerID	EmployeeID	OrderDate	ShipperID


		Employees table
		EmployeeID	LastName	FirstName	BirthDate	Photo	Notes

		
		lists the employees -> total employees 
		that have registered more than 10 orders -> orders 10ta wada karapu

		SELECT Employees.FirstName, Employees.LastName, COUNT(Orders.OrderID) AS 'Total Orders'
		FROM Employees INNER JOIN Orders ON Orders.EmployeeID = Employees.EmployeeID
		GROUP BY Employees.LastName
		HAVING COUNT(Orders.OrderID) > 10 



Stored Procedure         **************************************************
Using Stored Procedure we can save our code. then we can reuse them over and over again.
Stored Procedure is a prepared SQL code that you can save, 
this code can be reused over and over again.


01. Way to create Stored Procedure
CREATE PROCEDURE procedure_name
AS
sql_query
GO;

02. Way to run Stored Procedure
EXEC procedure_name;


---------------------------------------------------------
TRICKS

SELECT Count(*) AS DistinctCountries
FROM (SELECT DISTINCT Country FROM Customers);

OUTPUT 
DistinctCountries
21

---------------------------------------------------------

SELECT * FROM Customers
ORDER BY Country, CustomerName;

OUTPUT
The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" 
and the "CustomerName" column. This means that it orders by Country, 
but if some rows have the same Country, it orders them by CustomerName:

---------------------------------------------------------

SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;


OUTPUT
The following SQL statement selects all customers from the "Customers" table, 
sorted ascending by the "Country" and descending by the "CustomerName" column:

















